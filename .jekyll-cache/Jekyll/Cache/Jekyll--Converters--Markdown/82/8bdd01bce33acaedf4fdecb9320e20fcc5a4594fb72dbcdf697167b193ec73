I"F<h1 id="problem">Problem</h1>

<p>Given a binary tree, determine if it is a valid binary search tree (BST).</p>

<p>Assume a BST is defined as follows:</p>

<ul>
  <li>The left subtree of a node contains only nodes with keys less than the node’s key.</li>
  <li>The right subtree of a node contains only nodes with keys greater than the node’s key.</li>
  <li>Both the left and right subtrees must also be binary search trees.</li>
</ul>

<h2 id="example-1">Example 1</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>    <span class="mi">2</span>
   <span class="o">/</span> <span class="p">\</span>
  <span class="mi">1</span>   <span class="mi">3</span>

<span class="kt">Input</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="kt">Output</span><span class="p">:</span> <span class="kc">true</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="example-2">Example 2</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>    <span class="mi">5</span>
   <span class="o">/</span> <span class="p">\</span>
  <span class="mi">1</span>   <span class="mi">4</span>
     <span class="o">/</span> <span class="p">\</span>
    <span class="mi">3</span>   <span class="mi">6</span>

<span class="kt">Input</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="kt">Output</span><span class="p">:</span> <span class="kc">false</span>
<span class="kt">Explanation</span><span class="p">:</span> <span class="kt">The</span> <span class="n">root</span> <span class="n">node</span><span class="err">'</span><span class="n">s</span> <span class="n">value</span> <span class="k">is</span> <span class="mi">5</span> <span class="n">but</span> <span class="n">its</span> <span class="n">right</span> <span class="n">child</span><span class="err">'</span><span class="n">s</span> <span class="n">value</span> <span class="k">is</span> <span class="mi">4</span><span class="o">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer">My Answer</h1>
<ul>
  <li>현재 노드가 Null이라면 true</li>
  <li>현재 노드의 값이 최소값과 최대값 사이에 있는지 확인해야 한다.</li>
  <li>자식 노드가 없다면 true</li>
  <li>재귀를 이용해서 왼쪽과 오른쪽의 검증도 수행</li>
  <li>오른쪽의 최소 값은 현재 노드의 값이다. BST의 오른쪽 노드는 현재 노드의 값보다 커야 하기 때문</li>
  <li>왼쪽의 최대 값은 현재 노드의 값이다. BST의 왼쪽 노드는 현재 노드의 값보다 작아야 하기 때문</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValidBST</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">isValidBST</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kt">boolean</span> <span class="nf">isValidBST</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">node</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">min</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">max</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">node</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        
        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">min</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">val</span> <span class="o">&lt;=</span> <span class="n">min</span><span class="o">)</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        
        <span class="k">if</span> <span class="o">(</span><span class="n">max</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">val</span> <span class="o">&gt;=</span> <span class="n">max</span><span class="o">)</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>

        <span class="k">if</span> <span class="o">(</span> <span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        
        <span class="k">if</span> <span class="o">(!</span> <span class="n">isValidBST</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">val</span><span class="o">,</span> <span class="n">max</span><span class="o">))</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        
        <span class="k">if</span> <span class="o">(!</span> <span class="n">isValidBST</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">min</span><span class="o">,</span> <span class="n">val</span><span class="o">))</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>        
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET