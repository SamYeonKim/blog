I"p.<h1 id="problem">Problem</h1>

<p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>

<h2 id="example">Example</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="mi">3</span>
<span class="kt">Output</span><span class="p">:</span>
<span class="p">[</span>
  <span class="s">"((()))"</span><span class="p">,</span>
  <span class="s">"(()())"</span><span class="p">,</span>
  <span class="s">"(())()"</span><span class="p">,</span>
  <span class="s">"()(())"</span><span class="p">,</span>
  <span class="s">"()()()"</span>
<span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer--recursive-">My Answer ( Recursive )</h1>

<ul>
  <li>재귀를 이용해서 해결</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">generateParenthesis</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
        <span class="n">backtrack</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="s">""</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">backtrack</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">,</span> <span class="nc">String</span> <span class="n">cur</span><span class="o">,</span> <span class="kt">int</span> <span class="n">open</span><span class="o">,</span> <span class="kt">int</span> <span class="n">close</span><span class="o">,</span> <span class="kt">int</span> <span class="n">max</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="n">max</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cur</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">open</span> <span class="o">&lt;</span> <span class="n">max</span><span class="o">)</span>            
            <span class="n">backtrack</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">cur</span><span class="o">+</span><span class="s">"("</span><span class="o">,</span> <span class="n">open</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">close</span><span class="o">,</span> <span class="n">max</span><span class="o">);</span>
            
        <span class="k">if</span> <span class="o">(</span><span class="n">close</span> <span class="o">&lt;</span> <span class="n">open</span><span class="o">)</span>            
            <span class="n">backtrack</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">cur</span><span class="o">+</span><span class="s">")"</span><span class="o">,</span> <span class="n">open</span><span class="o">,</span> <span class="n">close</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">max</span><span class="o">);</span>            
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer--iteration-">My Answer ( Iteration )</h1>

<ul>
  <li>다음과 같은 알고리즘이 나온다
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>  f(0) = Empty
  f(1) = ()
  f(2) = ()() = () + f(1)
         (()) = ( f(1) )
  f(3) = ()()() = (f(0)) + f(2_1)
         ()(()) = (f(0)) + f(2_2)
         (())() = (f(1)) + f(1)
         (()()) = (f(2_1)) + f(0)
         ((())) = (f(2_2)) + f(0)
  first_sol = sol(0 ~ n - 1)
  second_sol = sol(n - 1 ~ 0)

  for(String x : first_sol)
      for(String y : second_sol)
          sol(n).add( (+ x +) + y )
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>0번째와 1번째는 미리 <code class="highlighter-rouge">Solutions</code>에 넣어 줬다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">generateParenthesis</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">solutions</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;();</span>
        
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">l_zero</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
        <span class="n">l_zero</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="n">solutions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">l_zero</span><span class="o">);</span>
        
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">l_one</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
        <span class="n">l_one</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"()"</span><span class="o">);</span>
        <span class="n">solutions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">l_one</span><span class="o">);</span>        
        
        <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">x_idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">y_idx</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">sol</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
            
            <span class="k">while</span><span class="o">(</span><span class="n">x_idx</span> <span class="o">&lt;</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">first</span> <span class="o">=</span> <span class="n">solutions</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">x_idx</span><span class="o">);</span>
                <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">second</span> <span class="o">=</span> <span class="n">solutions</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">y_idx</span><span class="o">);</span>
                
                <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">x</span> <span class="o">:</span> <span class="n">first</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">y</span> <span class="o">:</span> <span class="n">second</span> <span class="o">)</span> <span class="o">{</span>
                        <span class="n">sol</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"(%s)%s"</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">));</span>    
                    <span class="o">}</span>
                <span class="o">}</span>

                <span class="n">x_idx</span><span class="o">++;</span>
                <span class="n">y_idx</span><span class="o">--;</span>
            <span class="o">}</span>
            
            <span class="n">solutions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">sol</span><span class="o">);</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">solutions</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET