I"gS<h1 id="problem">Problem</h1>

<p>Given n non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p>

<p><img src="/assets/img/leetcode/large_histogram_bef.png" alt="" /></p>

<p>Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].</p>

<p><img src="/assets/img/leetcode/large_histogram_aft.png" alt="" /></p>

<p>The largest rectangle is shown in the shaded area, which has area = 10 unit.</p>

<h2 id="example">Example</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="kt">Output</span><span class="p">:</span> <span class="mi">10</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer">My Answer</h1>

<ul>
  <li>재귀를 이용해서 해결</li>
  <li><code class="highlighter-rouge">backTracking</code> 함수의 파라미터로 기준이 되는 <code class="highlighter-rouge">index</code> 를 넘긴다.</li>
  <li><code class="highlighter-rouge">backTracking</code> 함수에서는 <code class="highlighter-rouge">start</code> index에 해당 하는 <code class="highlighter-rouge">pivot</code>을 기준으로 좌,우의 값을 비교 해서 같거나 클때 <code class="highlighter-rouge">count</code>를 증가 시킨다.</li>
  <li><code class="highlighter-rouge">while(prev &gt;= 0 || next &lt; length ) {</code> 구문 이후 최종 계산된 <code class="highlighter-rouge">count</code>와 <code class="highlighter-rouge">pivot</code>의 곱을 통해 현재 기준값으로 나올수 있는 최대 값을 구하고,</li>
  <li>재귀를 통해 그 다음 <code class="highlighter-rouge">index</code>에 해당 하는 값을 구해서 <code class="highlighter-rouge">Max</code> 비교 한다.</li>
  <li>모든 원소에 대해서 수행하기 때문에, 연산량이 많다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">largestRectangleArea</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">heights</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">backTracking</span><span class="o">(</span><span class="n">heights</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kt">int</span> <span class="nf">backTracking</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">heights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span> <span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">heights</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;=</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">heights</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">start</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">next</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        
        <span class="k">while</span><span class="o">(</span><span class="n">prev</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">next</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span> <span class="n">prev</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span> <span class="n">heights</span><span class="o">[</span><span class="n">prev</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">pivot</span> <span class="o">)</span> <span class="o">{</span>
                    <span class="n">count</span><span class="o">++;</span>
                    <span class="n">prev</span><span class="o">--;</span> 
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">prev</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>                
            <span class="o">}</span>
            
            <span class="k">if</span> <span class="o">(</span> <span class="n">next</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span> <span class="n">heights</span><span class="o">[</span><span class="n">next</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">pivot</span> <span class="o">)</span> <span class="o">{</span>
                    <span class="n">count</span><span class="o">++;</span>
                    <span class="n">next</span><span class="o">++;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">next</span> <span class="o">=</span> <span class="n">length</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>            
        <span class="o">}</span>
       
        <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">pivot</span> <span class="o">*</span> <span class="n">count</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">next_total</span> <span class="o">=</span> <span class="n">backTracking</span><span class="o">(</span><span class="n">heights</span><span class="o">,</span> <span class="n">start</span> <span class="o">+</span><span class="mi">1</span><span class="o">);</span>
        
        <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">total</span><span class="o">,</span> <span class="n">next_total</span><span class="o">);</span>        
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="fastest-answer">Fastest Answer</h1>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">largestRectangleArea</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">heights</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">heights</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">heights</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nf">lra</span><span class="o">(</span><span class="n">heights</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">heights</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">lra</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">heights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">heights</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="c1">//start index에 해당 하는 값을 기준으로 최소 값을 구한다.</span>
        <span class="c1">//start ~ end 사이 값들을 비교하면서, 요소들이 오름차순으로만 구성되어 있는지, 내림차순으로만 구성 되어 있는지, 아니면 뒤죽박죽 섞여 있는지 체크한다.</span>
        <span class="kt">boolean</span> <span class="n">ascd</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="kt">boolean</span> <span class="n">desc</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">heights</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">min</span> <span class="o">=</span> <span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">ascd</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">desc</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">min</span> <span class="o">*</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">);</span>  <span class="c1">//위 반복문에 의해서 결정된 min값과 end-start의 곱이 곧 start 기준에 나올수 있는 최대 값이다.</span>
        
        <span class="k">if</span> <span class="o">(</span><span class="n">ascd</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//오름 차순으로되어 있다면, start + 1 ~ end 까지 최대 값을 구해서 비교</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
                <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">*</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">i</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">tmp</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">max</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">desc</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//내림 차순으로되어 있다면, 뒤쪽부터 작은 수 이기 때문에, end-2 ~ start 까지 최대 값을 구해서 비교</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
                <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">*</span> <span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">tmp</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">max</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="kt">boolean</span> <span class="n">getStart</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">getStart</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">min</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
                    <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                    <span class="n">getStart</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">heights</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">min</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
                    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">lra</span><span class="o">(</span><span class="n">heights</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">tmp</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">max</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="n">getStart</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">getStart</span><span class="o">)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">lra</span><span class="o">(</span><span class="n">heights</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">tmp</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">max</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">max</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET