I"\<h1 id="problem">Problem</h1>

<p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.</p>

<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.</p>

<h2 id="example">Example</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">15</span><span class="p">],</span> <span class="n">target</span> <span class="o">=</span> <span class="mi">9</span>
<span class="kt">Output</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="kt">Explanation</span><span class="p">:</span> <span class="kt">The</span> <span class="n">sum</span> <span class="n">of</span> <span class="mi">2</span> <span class="n">and</span> <span class="mi">7</span> <span class="k">is</span> <span class="mi">9</span><span class="o">.</span> <span class="kt">Therefore</span> <span class="n">index1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">index2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="note">Note</h2>

<ul>
  <li>Your returned answers (both index1 and index2) are not zero-based.</li>
  <li>You may assume that each input would have exactly one solution and you may not use the same element twice.</li>
</ul>

<h1 id="my-answer">My Answer</h1>

<ul>
  <li><code class="highlighter-rouge">l</code>, <code class="highlighter-rouge">r</code>은 각각 왼쪽 index, 오른쪽 index를 의미 한다.</li>
  <li><code class="highlighter-rouge">numbers[l]</code>과 <code class="highlighter-rouge">numbers[r]</code>의 합(<code class="highlighter-rouge">sum</code>)이 <code class="highlighter-rouge">target</code>과 동일하면 정답이다.</li>
  <li>만약 <code class="highlighter-rouge">sum</code>이 <code class="highlighter-rouge">target</code>보다 크다면, <code class="highlighter-rouge">r</code>을 하나 감소 시키자.</li>
  <li>만약 <code class="highlighter-rouge">sum</code>이 <code class="highlighter-rouge">target</code>보다 작다면, <code class="highlighter-rouge">l</code>을 하나 증가 시키자.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">twoSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">l</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">r</span><span class="o">=</span><span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        
        <span class="k">while</span><span class="o">(</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span> <span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">[</span><span class="n">l</span><span class="o">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="o">[</span><span class="n">r</span><span class="o">];</span>
            <span class="k">if</span> <span class="o">(</span> <span class="n">sum</span> <span class="o">==</span> <span class="n">target</span> <span class="o">)</span> <span class="o">{</span>
                <span class="n">result</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
                <span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            
            <span class="k">if</span> <span class="o">(</span> <span class="n">sum</span> <span class="o">&gt;</span> <span class="n">target</span> <span class="o">)</span> <span class="o">{</span>
                <span class="n">r</span><span class="o">--;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">l</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>    
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET