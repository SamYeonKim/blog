I"]'<h1 id="problem">Problem</h1>

<p>Implement a trie with insert, search, and startsWith methods.</p>

<h2 id="example">Example</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kt">Trie</span> <span class="n">trie</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Trie</span><span class="p">();</span>

<span class="n">trie</span><span class="o">.</span><span class="nf">insert</span><span class="p">(</span><span class="s">"apple"</span><span class="p">);</span>
<span class="n">trie</span><span class="o">.</span><span class="nf">search</span><span class="p">(</span><span class="s">"apple"</span><span class="p">);</span>   <span class="c1">// returns true</span>
<span class="n">trie</span><span class="o">.</span><span class="nf">search</span><span class="p">(</span><span class="s">"app"</span><span class="p">);</span>     <span class="c1">// returns false</span>
<span class="n">trie</span><span class="o">.</span><span class="nf">startsWith</span><span class="p">(</span><span class="s">"app"</span><span class="p">);</span> <span class="c1">// returns true</span>
<span class="n">trie</span><span class="o">.</span><span class="nf">insert</span><span class="p">(</span><span class="s">"app"</span><span class="p">);</span>   
<span class="n">trie</span><span class="o">.</span><span class="nf">search</span><span class="p">(</span><span class="s">"app"</span><span class="p">);</span>     <span class="c1">// returns true</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="note">Note</h2>

<ul>
  <li>You may assume that all inputs are consist of lowercase letters <code class="highlighter-rouge">a-z</code></li>
  <li>All inputs are guaranteed to be non-empty strings</li>
</ul>

<h1 id="my-answer">My Answer</h1>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">TrieNode</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">is_leaf</span><span class="o">;</span>
    <span class="nc">TrieNode</span><span class="o">[]</span> <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TrieNode</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>    
    
    <span class="kt">boolean</span> <span class="nf">containsKey</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">children</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="nc">TrieNode</span> <span class="nf">get</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">children</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">];</span>
    <span class="o">}</span>
    
    <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">,</span> <span class="nc">TrieNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">children</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Trie</span> <span class="o">{</span>
    <span class="nc">TrieNode</span> <span class="n">m_root</span><span class="o">;</span>
    <span class="cm">/** Initialize your data structure here. */</span>
    <span class="kd">public</span> <span class="nf">Trie</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">m_root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TrieNode</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="cm">/** Inserts a word into the trie. */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="nc">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>        
        <span class="nc">TrieNode</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">m_root</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">word</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="n">cur</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">cur</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="k">new</span> <span class="nc">TrieNode</span><span class="o">());</span>
            <span class="o">}</span> 
            
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">);</span> 
        <span class="o">}</span>
        
        <span class="n">cur</span><span class="o">.</span><span class="na">is_leaf</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="cm">/** Returns if the word is in the trie. */</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">search</span><span class="o">(</span><span class="nc">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">TrieNode</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">m_root</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">word</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="n">cur</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">c</span><span class="o">))</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>         
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">cur</span><span class="o">.</span><span class="na">is_leaf</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="cm">/** Returns if there is any word in the trie that starts with the given prefix. */</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">startsWith</span><span class="o">(</span><span class="nc">String</span> <span class="n">prefix</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">TrieNode</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">m_root</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">prefix</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>            
            <span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="n">cur</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">c</span><span class="o">))</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>         
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="cm">/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET