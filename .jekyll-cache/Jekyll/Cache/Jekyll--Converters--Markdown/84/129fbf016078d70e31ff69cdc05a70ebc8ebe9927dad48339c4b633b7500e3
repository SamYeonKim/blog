I"Q)<h1 id="problem">Problem</h1>

<p>Given the root node of a binary search tree (BST) and a value to be inserted into the tree, insert the value into the BST. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.</p>

<p>Note that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.</p>

<h2 id="example">Example</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> 
        <span class="mi">4</span>
       <span class="o">/</span> <span class="p">\</span>
      <span class="mi">2</span>   <span class="mi">7</span>
     <span class="o">/</span> <span class="p">\</span>
    <span class="mi">1</span>   <span class="mi">3</span>
    <span class="nv">insert</span> <span class="p">:</span> <span class="mi">5</span>
<span class="kt">Output</span><span class="p">:</span> 
         <span class="mi">4</span>
       <span class="o">/</span>   <span class="p">\</span>
      <span class="mi">2</span>     <span class="mi">7</span>
     <span class="o">/</span> <span class="p">\</span>   <span class="o">/</span>
    <span class="mi">1</span>   <span class="mi">3</span> <span class="mi">5</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer--iteration-">My Answer ( Iteration )</h1>

<ul>
  <li>만약 <code class="highlighter-rouge">root</code>가 <code class="highlighter-rouge">null</code>이라면, <code class="highlighter-rouge">val</code>을 이용해서 새로운 <code class="highlighter-rouge">root</code>를 만들고 반환</li>
  <li><code class="highlighter-rouge">leaf</code>노드가 <code class="highlighter-rouge">null</code>인 노드를 찾고 해당 노드의 <code class="highlighter-rouge">left</code>혹은 <code class="highlighter-rouge">right</code>에 새로운 노드를 만든다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">TreeNode</span> <span class="nf">insertIntoBST</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">root</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="o">(</span><span class="n">val</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="nc">TreeNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>
        
        <span class="k">while</span> <span class="o">(</span> <span class="n">curr</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
            <span class="kt">boolean</span> <span class="n">is_left</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">val</span> <span class="o">&gt;</span> <span class="n">val</span><span class="o">;</span>
            <span class="nc">TreeNode</span> <span class="n">next</span> <span class="o">=</span> <span class="n">is_left</span> <span class="o">?</span> <span class="n">curr</span><span class="o">.</span><span class="na">left</span> <span class="o">:</span> <span class="n">curr</span><span class="o">.</span><span class="na">right</span><span class="o">;</span> 
            
            <span class="k">if</span> <span class="o">(</span> <span class="n">next</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span> <span class="n">is_left</span> <span class="o">)</span> <span class="n">curr</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="o">(</span><span class="n">val</span><span class="o">);</span>
                <span class="k">else</span> <span class="n">curr</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="o">(</span><span class="n">val</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">curr</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
            <span class="o">}</span>            
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer--recursive-">My Answer ( Recursive )</h1>

<ul>
  <li>재귀를 이용해서 해결</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">TreeNode</span> <span class="nf">insertIntoBST</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">root</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="o">(</span><span class="n">val</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="n">_insertIntoBST</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
        
        <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kt">void</span> <span class="nf">_insertIntoBST</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">boolean</span> <span class="n">is_left</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">val</span> <span class="o">&gt;</span> <span class="n">val</span><span class="o">;</span>
        <span class="nc">TreeNode</span> <span class="n">next</span> <span class="o">=</span> <span class="n">is_left</span> <span class="o">?</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">:</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">;</span> 
            
        <span class="k">if</span> <span class="o">(</span> <span class="n">next</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span> <span class="n">is_left</span> <span class="o">)</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="o">(</span><span class="n">val</span><span class="o">);</span>
            <span class="k">else</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="o">(</span><span class="n">val</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">if</span> <span class="o">(</span> <span class="n">is_left</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">insertIntoBST</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">insertIntoBST</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET