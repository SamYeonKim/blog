I"UA<h1 id="problem">Problem</h1>

<p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.</p>

<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>

<p><img src="/assets/img/leetcode/phone_number.png" alt="" /></p>

<h2 id="example">Example</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="s">"23"</span>
<span class="kt">Output</span><span class="p">:</span> <span class="p">[</span><span class="s">"ad"</span><span class="p">,</span> <span class="s">"ae"</span><span class="p">,</span> <span class="s">"af"</span><span class="p">,</span> <span class="s">"bd"</span><span class="p">,</span> <span class="s">"be"</span><span class="p">,</span> <span class="s">"bf"</span><span class="p">,</span> <span class="s">"cd"</span><span class="p">,</span> <span class="s">"ce"</span><span class="p">,</span> <span class="s">"cf"</span><span class="p">]</span><span class="o">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer">My Answer</h1>

<ul>
  <li>재귀로 해결</li>
  <li>사전에 <code class="highlighter-rouge">HashMap</code>을 이용해서 각 숫자별 매칭될 문자열을 지정해 주자.</li>
  <li><code class="highlighter-rouge">digits</code>에 <code class="highlighter-rouge">HashMap</code>에 지정되지 않은 숫자가 넘어 올 수 있기 때문에, 이런 경우 빈 결과를 리턴</li>
  <li><code class="highlighter-rouge">StringBuilder</code>를 이용해서 중간 과정들을 저장하고, <code class="highlighter-rouge">digits</code>의 숫자 갯수와 동일해 지면 <code class="highlighter-rouge">StringBuilder</code>의 문자열을 결과 리스트에 넣는다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map_digits</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;(){{</span>
        <span class="n">put</span><span class="o">(</span><span class="sc">'2'</span><span class="o">,</span> <span class="s">"abc"</span><span class="o">);</span>
        <span class="n">put</span><span class="o">(</span><span class="sc">'3'</span><span class="o">,</span> <span class="s">"def"</span><span class="o">);</span>
        <span class="n">put</span><span class="o">(</span><span class="sc">'4'</span><span class="o">,</span> <span class="s">"ghi"</span><span class="o">);</span>
        <span class="n">put</span><span class="o">(</span><span class="sc">'5'</span><span class="o">,</span> <span class="s">"jkl"</span><span class="o">);</span>
        <span class="n">put</span><span class="o">(</span><span class="sc">'6'</span><span class="o">,</span> <span class="s">"mno"</span><span class="o">);</span>
        <span class="n">put</span><span class="o">(</span><span class="sc">'7'</span><span class="o">,</span> <span class="s">"pqrs"</span><span class="o">);</span>
        <span class="n">put</span><span class="o">(</span><span class="sc">'8'</span><span class="o">,</span> <span class="s">"tuv"</span><span class="o">);</span>
        <span class="n">put</span><span class="o">(</span><span class="sc">'9'</span><span class="o">,</span> <span class="s">"wxyz"</span><span class="o">);</span>
    <span class="o">}};</span>
    

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">letterCombinations</span><span class="o">(</span><span class="nc">String</span> <span class="n">digits</span><span class="o">)</span> <span class="o">{</span>        
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">digits</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">)</span> 
            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
        
        <span class="kt">char</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="n">digits</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span> <span class="o">!</span><span class="n">map_digits</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="nc">StringBuilder</span> <span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        
        <span class="n">backTracking</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="n">str</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kt">void</span> <span class="nf">backTracking</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">input</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">,</span> <span class="nc">StringBuilder</span> <span class="n">str</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">start</span> <span class="o">==</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="nc">String</span> <span class="n">alpha</span> <span class="o">=</span> <span class="n">map_digits</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="n">start</span><span class="o">]);</span>
        
        <span class="kt">char</span><span class="o">[]</span> <span class="n">arr_alpha</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr_alpha</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">str</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">arr_alpha</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="n">backTracking</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="n">str</span><span class="o">,</span> <span class="n">start</span> <span class="o">+</span><span class="mi">1</span><span class="o">);</span>
            <span class="n">str</span><span class="o">.</span><span class="na">deleteCharAt</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>   
    <span class="o">}</span>    
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="simple-answer">Simple Answer</h1>

<ul>
  <li>재귀를 이용해서 해결, <code class="highlighter-rouge">StringBuilder</code>나 사전에 <code class="highlighter-rouge">digits</code> 검사 없이 진행</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">letterCombinations</span><span class="o">(</span><span class="nc">String</span> <span class="n">digits</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">digits</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">output</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"2"</span><span class="o">,</span><span class="s">"abc"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"3"</span><span class="o">,</span><span class="s">"def"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"4"</span><span class="o">,</span><span class="s">"ghi"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"5"</span><span class="o">,</span><span class="s">"jkl"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"6"</span><span class="o">,</span><span class="s">"mno"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"7"</span><span class="o">,</span><span class="s">"pqrs"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"8"</span><span class="o">,</span><span class="s">"tuv"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"9"</span><span class="o">,</span><span class="s">"wxyz"</span><span class="o">);</span>
        
        <span class="n">helper</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="n">digits</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">output</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">helper</span><span class="o">(</span><span class="nc">String</span> <span class="n">combination</span><span class="o">,</span> <span class="nc">String</span> <span class="n">nextDigits</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">nextDigits</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">output</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">combination</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="nc">String</span> <span class="n">digit</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">nextDigits</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
        <span class="nc">String</span> <span class="n">letters</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">digit</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">letters</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">letter</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">letters</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
            <span class="n">helper</span><span class="o">(</span><span class="n">combination</span> <span class="o">+</span> <span class="n">letter</span><span class="o">,</span> <span class="n">nextDigits</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET