I"B<h1 id="problem">Problem</h1>

<p>Design a HashMap without using any built-in hash table libraries.</p>

<p>To be specific, your design should include these functions:</p>

<ul>
  <li><code class="highlighter-rouge">put(key, value)</code> : Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.</li>
  <li><code class="highlighter-rouge">get(key)</code> : Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.</li>
  <li><code class="highlighter-rouge">remove(key)</code> : Remove the mapping for the value key if this map contains the mapping for the key.</li>
</ul>

<h2 id="example">Example</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kt">MyHashMap</span> <span class="n">hashMap</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">MyHashMap</span><span class="p">();</span>
<span class="n">hashMap</span><span class="o">.</span><span class="nf">put</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>          
<span class="n">hashMap</span><span class="o">.</span><span class="nf">put</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>         
<span class="n">hashMap</span><span class="o">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>            <span class="c1">// returns 1</span>
<span class="n">hashMap</span><span class="o">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>            <span class="c1">// returns -1 (not found)</span>
<span class="n">hashMap</span><span class="o">.</span><span class="nf">put</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>          <span class="c1">// update the existing value</span>
<span class="n">hashMap</span><span class="o">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>            <span class="c1">// returns 1 </span>
<span class="n">hashMap</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>          <span class="c1">// remove the mapping for 2</span>
<span class="n">hashMap</span><span class="o">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>            <span class="c1">// returns -1 (not found) </span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="note">Note</h2>

<ul>
  <li>All keys and values will be in the range of <code class="highlighter-rouge">[0, 1000000]</code></li>
  <li>The number of operations will be in the range of <code class="highlighter-rouge">[1, 10000]</code></li>
  <li>Please do not use the built-in HashMap library</li>
</ul>

<h1 id="my-answer">My Answer</h1>

<ul>
  <li>2차원 배열을 이용해서 값을 저장하자.</li>
  <li>첫번째 index가 어떤 <code class="highlighter-rouge">Bucket</code>인지를 결정. <code class="highlighter-rouge">value</code>의 범위가 <code class="highlighter-rouge">0~1000000</code>이기 때문에, <code class="highlighter-rouge">value / 1000</code>를 첫번째 index를 구하는 함수로 사용 (<code class="highlighter-rouge">getHash</code>).</li>
  <li>두번째 index가 <code class="highlighter-rouge">Bucket</code>에서 저장될 위치를 결정. <code class="highlighter-rouge">value</code>의 범위가 <code class="highlighter-rouge">0~1000000</code>이기 때문에, <code class="highlighter-rouge">value % 1000</code>를 두번째 index를 구하는 함수로 사용 ( <code class="highlighter-rouge">getIndex</code>).</li>
  <li><code class="highlighter-rouge">add</code>함수에서 파라미터로 넘어온 <code class="highlighter-rouge">value</code>에 맞춰서 <code class="highlighter-rouge">getHash</code>, <code class="highlighter-rouge">getIndex</code>를 구하고, 현재 2차원 배열의 길이가 <code class="highlighter-rouge">Hash, Index</code> 보다 작다면 사이즈를 키운다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">MyHashMap</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[][]</span> <span class="n">values</span><span class="o">;</span>
    <span class="cm">/** Initialize your data structure here. */</span>
    <span class="kd">public</span> <span class="nf">MyHashMap</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">values</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
    <span class="o">}</span>
    
    <span class="cm">/** value will always be non-negative. */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">getHash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>    
            <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">getIndex</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
            <span class="n">values</span><span class="o">[</span><span class="n">hash</span><span class="o">][</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
            
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
            
        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">getHash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">values</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;=</span> <span class="n">hash</span> <span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span><span class="o">[][]</span> <span class="n">new_v</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">hash</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][];</span>
            
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">new_v</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">values</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">new_v</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">values</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">];</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">values</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="mi">0</span><span class="o">,</span> <span class="n">new_v</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="mi">0</span><span class="o">,</span> <span class="n">values</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">);</span>    
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">new_v</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
                <span class="o">}</span>                
            <span class="o">}</span>
            <span class="n">values</span> <span class="o">=</span> <span class="n">new_v</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">getIndex</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">sub_count</span> <span class="o">=</span> <span class="n">values</span><span class="o">[</span><span class="n">hash</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">sub_count</span> <span class="o">&lt;=</span> <span class="n">index</span> <span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span><span class="o">[]</span> <span class="n">new_sub</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>    
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">new_sub</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">org_value</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sub_count</span> <span class="o">)</span> <span class="o">{</span>
                    <span class="n">org_value</span> <span class="o">=</span> <span class="n">values</span><span class="o">[</span><span class="n">hash</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
                <span class="o">}</span> 
                
                <span class="n">new_sub</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">org_value</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">values</span><span class="o">[</span><span class="n">hash</span><span class="o">]</span> <span class="o">=</span> <span class="n">new_sub</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="n">values</span><span class="o">[</span><span class="n">hash</span><span class="o">][</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="cm">/** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">getHash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        
        <span class="k">if</span> <span class="o">(</span> <span class="n">values</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;=</span> <span class="n">hash</span> <span class="o">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">getIndex</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">values</span><span class="o">[</span><span class="n">hash</span><span class="o">].</span><span class="na">length</span> <span class="o">&lt;=</span> <span class="n">index</span> <span class="o">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        
        <span class="k">return</span> <span class="n">values</span><span class="o">[</span><span class="n">hash</span><span class="o">][</span><span class="n">index</span><span class="o">];</span>
    <span class="o">}</span>
    
    <span class="kt">int</span> <span class="nf">getHash</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">key</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">;</span>        
    <span class="o">}</span>
    
    <span class="kt">int</span> <span class="nf">getIndex</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">key</span> <span class="o">%</span> <span class="mi">1000</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="cm">/** Removes the mapping of the specified value key if this map contains a mapping for the key */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">)</span> <span class="k">return</span><span class="o">;</span>
        
        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">getHash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">getIndex</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        
        <span class="n">values</span><span class="o">[</span><span class="n">hash</span><span class="o">][</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="cm">/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET