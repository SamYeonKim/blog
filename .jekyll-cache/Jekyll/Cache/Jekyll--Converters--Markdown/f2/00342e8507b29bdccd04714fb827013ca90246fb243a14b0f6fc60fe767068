I"q,<h1 id="problem">Problem</h1>

<p>Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.</p>

<h2 id="example-1">Example 1</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="kt">Output</span><span class="p">:</span> <span class="mi">2</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="example-2">Example 2</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="kt">Output</span><span class="p">:</span> <span class="mi">3</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="note">Note</h2>

<ul>
  <li>You must not modify the array ( assume the array is read only )</li>
  <li>You must use only constant. O(1) extra space</li>
  <li>Your runtime complexity should be less than O(n^2)</li>
  <li>There is only one duplicate number in the array, but it could be repeated more than once</li>
</ul>

<h1 id="my-answer">My Answer</h1>

<ul>
  <li><code class="highlighter-rouge">중간값(mid)</code>를 이용해서 해결</li>
  <li><code class="highlighter-rouge">nums</code>에 있는 모든 요소의 범위는 <code class="highlighter-rouge">1~n</code>이다.</li>
  <li><code class="highlighter-rouge">nums</code>에 있는 요소들은 특정 값 <code class="highlighter-rouge">x</code>보다 같거나 작은것의 갯수는 중복 되는 것이 없을때 <code class="highlighter-rouge">x</code>가 나와야 한다.
    <blockquote>
      <p>[1,2,3,4], if <code class="highlighter-rouge">x</code>==2 일때 [1,2]=2, if <code class="highlighter-rouge">x</code>==3 일때 [1,2,3]</p>
    </blockquote>
  </li>
  <li><code class="highlighter-rouge">nums</code>에 있는 요소들은 특정 값 <code class="highlighter-rouge">x</code>보다 같거나 작은것의 갯수는 중복 되는 것이 있을때 <code class="highlighter-rouge">x</code>보다 큰 값이 나와야 한다.
    <blockquote>
      <p>[1,2,2,3], if <code class="highlighter-rouge">x</code>==2 일때 [1,2,2]=3, if <code class="highlighter-rouge">x</code>==1 일때 [1]</p>
    </blockquote>
  </li>
  <li>위 조건대로라면, <code class="highlighter-rouge">mid</code>를 <code class="highlighter-rouge">x</code>라고 했을때 <code class="highlighter-rouge">x</code>보다 작거나 같은것의 갯수가 <code class="highlighter-rouge">x</code>보다 큰지 작은지에 따라 <code class="highlighter-rouge">mid</code>의 값을 변경해 주면 된다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">findDuplicate</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">l</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">r</span><span class="o">=</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        
        <span class="k">while</span><span class="o">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">r</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>    
            
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="n">mid</span> <span class="o">)</span>
                    <span class="n">count</span><span class="o">++;</span>         
            <span class="o">}</span>
            
            <span class="k">if</span> <span class="o">(</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="n">mid</span> <span class="o">)</span> <span class="o">{</span>
                <span class="n">r</span><span class="o">--;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">l</span><span class="o">++;</span>
            <span class="o">}</span>            
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">l</span><span class="o">;</span>        
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="fastest-answer">Fastest Answer</h1>

<ul>
  <li><code class="highlighter-rouge">nums</code>에 있는 모든 요소의 범위는 <code class="highlighter-rouge">1~n</code>이다.</li>
  <li><code class="highlighter-rouge">slow</code>, <code class="highlighter-rouge">fast</code>는 각각 <code class="highlighter-rouge">늦은 index</code>와 <code class="highlighter-rouge">빠른 index</code>를 의미 한다.</li>
  <li>첫번째 <code class="highlighter-rouge">do~while</code> 문에서 <code class="highlighter-rouge">slow</code>는 순차 대로 접근 하고, <code class="highlighter-rouge">fast</code>는 <code class="highlighter-rouge">slow</code> 보다 2배 빠른 접근 한다. 그래서, <code class="highlighter-rouge">slow</code>와 <code class="highlighter-rouge">fast</code>를 동일한 빠르기로 접근할 수 있는 값을 찾는다. 예를 들어 다음과 같은 흐름이다.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>  Input: [1,3,4,2,2]
  slow = 0, fast = 0
  1:
      slow = nums[0] = 1
      fast = nums[nums[0]] = nums[1] = 3
  2:
      slow = nums[1] = 3
      fast = nums[nums[3]] = nums[2] = 4
  3:
      slow = nums[3] = 2
      fast = nums[nums[4]] = nums[2] = 4
  4:
      slow = nums[2] = 4
      fast = nums[nums[4]] = nums[2] = 4
  slow와 fast가 같아졌기 때문에 종료
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>두번째 <code class="highlighter-rouge">while</code>문에선 <code class="highlighter-rouge">slow</code>와 <code class="highlighter-rouge">fast</code> 둘다 동일한 순차 접근으로 동일한 값을 찾는다. 예를 들어 다음과 같은 흐름이다.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>  Input: [1,3,4,2,2]
  위의 do~while을 통해 fast가 4로 결정났다.
  slow = 0, fast = 4
  1:
      slow = nums[0] = 1
      fast = nums[4] = 2
  2:
      slow = nums[1] = 3
      fast = nums[2] = 4
  3:
      slow = nums[3] = 2
      fast = nums[4] = 2
  slow와 fast가 같아졌기 때문에 종료
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">findDuplicate</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">slow</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">fast</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        
        <span class="k">do</span> <span class="o">{</span>
            <span class="n">slow</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">slow</span><span class="o">];</span>
            <span class="n">fast</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">nums</span><span class="o">[</span><span class="n">fast</span><span class="o">]];</span>
        <span class="o">}</span> <span class="k">while</span><span class="o">(</span><span class="n">slow</span> <span class="o">!=</span> <span class="n">fast</span><span class="o">);</span>

        <span class="n">slow</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        
        <span class="k">while</span><span class="o">(</span><span class="n">slow</span> <span class="o">!=</span> <span class="n">fast</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">slow</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">slow</span><span class="o">];</span>
            <span class="n">fast</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">fast</span><span class="o">];</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">slow</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET