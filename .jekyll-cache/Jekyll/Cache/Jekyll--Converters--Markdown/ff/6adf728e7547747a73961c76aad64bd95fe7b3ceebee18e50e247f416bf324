I",<h1 id="problem">Problem</h1>

<p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>

<h2 id="example-1">Example 1</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>    <span class="mi">1</span>
   <span class="o">/</span> <span class="p">\</span>
  <span class="mi">2</span>   <span class="mi">2</span>
 <span class="o">/</span> <span class="p">\</span> <span class="o">/</span> <span class="p">\</span>
<span class="mi">3</span>  <span class="mi">4</span> <span class="mi">4</span>  <span class="mi">3</span>

<span class="kt">Input</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="kt">Output</span><span class="p">:</span> <span class="kc">true</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="example-2">Example 2</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>    <span class="mi">1</span>
   <span class="o">/</span> <span class="p">\</span>
  <span class="mi">2</span>   <span class="mi">2</span>
   <span class="p">\</span>   <span class="p">\</span>
   <span class="mi">3</span>    <span class="mi">3</span>

<span class="kt">Input</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="kt">Output</span><span class="p">:</span> <span class="kc">false</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer--recursive-">My Answer ( Recursive )</h1>

<ul>
  <li>재귀를 이용해서 해결</li>
  <li><code class="highlighter-rouge">isMirror</code> 함수를 이용해서 확인</li>
  <li><code class="highlighter-rouge">t1</code> 과 <code class="highlighter-rouge">t2</code> 둘 다 <code class="highlighter-rouge">null</code> 이라면 <code class="highlighter-rouge">true</code></li>
  <li><code class="highlighter-rouge">t1</code> 과 <code class="highlighter-rouge">t2</code> 둘 중에 하나만 <code class="highlighter-rouge">null</code> 이라면 <code class="highlighter-rouge">false</code></li>
  <li>둘 다 <code class="highlighter-rouge">null</code>이 아닐땐, 둘다 값이 동일 하고 재귀 호출로 <code class="highlighter-rouge">t1.right</code>, <code class="highlighter-rouge">t2.left</code>를 확인하고, <code class="highlighter-rouge">t1.left, t2.right</code>를 확인해서 결정</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSymmetric</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">isMirror</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">root</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isMirror</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">t1</span><span class="o">,</span> <span class="nc">TreeNode</span> <span class="n">t2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">t1</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">t2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">t1</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">t2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">t1</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">t2</span><span class="o">.</span><span class="na">val</span><span class="o">)</span>
            <span class="o">&amp;&amp;</span> <span class="n">isMirror</span><span class="o">(</span><span class="n">t1</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">t2</span><span class="o">.</span><span class="na">left</span><span class="o">)</span>
            <span class="o">&amp;&amp;</span> <span class="n">isMirror</span><span class="o">(</span><span class="n">t1</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">t2</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer--iteration-">My Answer ( Iteration )</h1>

<ul>
  <li>반복문을 이용해서 해결</li>
  <li><code class="highlighter-rouge">Queue</code>에 2개씩 넣고 조건에 맞춰서 비교 하자.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSymmetric</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">root</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        
        <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        
        <span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">TreeNode</span> <span class="n">t1</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="nc">TreeNode</span> <span class="n">t2</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            
            <span class="k">if</span> <span class="o">(</span> <span class="n">t1</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">t2</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span>
                <span class="k">continue</span><span class="o">;</span>
            
            <span class="k">if</span> <span class="o">(</span> <span class="n">t1</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">t2</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            
            <span class="k">if</span> <span class="o">(</span> <span class="n">t1</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">t2</span><span class="o">.</span><span class="na">val</span> <span class="o">)</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            
            <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">t1</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
            <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">t2</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
            <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">t1</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
            <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">t2</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET