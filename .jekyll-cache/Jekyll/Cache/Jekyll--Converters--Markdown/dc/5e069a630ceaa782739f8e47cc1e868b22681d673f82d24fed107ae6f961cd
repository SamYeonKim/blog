I"f'<h1 id="problem">Problem</h1>

<p>Given a binary tree, return the inorder traversal of its nodes’ values.</p>

<h2 id="example">Example</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
   <span class="mi">1</span>
    <span class="p">\</span>
     <span class="mi">2</span>
    <span class="o">/</span>
   <span class="mi">3</span>

<span class="kt">Output</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer--recursive-">My Answer ( Recursive )</h1>

<ul>
  <li>재귀로 해결</li>
  <li><code class="highlighter-rouge">solver</code> 함수에서 결과 리스트에 추가 하는 순서를 <code class="highlighter-rouge">left</code> -&gt; <code class="highlighter-rouge">node</code> -&gt; <code class="highlighter-rouge">right</code> 순으로 진행</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">inorderTraversal</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
        
        <span class="n">solver</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">root</span><span class="o">);</span>
        
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>        
    <span class="o">}</span>
    
    <span class="kt">void</span> <span class="nf">solver</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">ans</span><span class="o">,</span> <span class="nc">TreeNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>       
        <span class="k">if</span> <span class="o">(</span> <span class="n">node</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span>
            <span class="k">return</span><span class="o">;</span>
        
        <span class="k">if</span> <span class="o">(</span> <span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">solver</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
        <span class="o">}</span>
        
        <span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
        
        <span class="k">if</span> <span class="o">(</span> <span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">solver</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer--iteration-">My Answer ( Iteration )</h1>

<ul>
  <li>반복문을 이용해서 해결</li>
  <li><code class="highlighter-rouge">left</code> 노드를 우선으로 해서 <code class="highlighter-rouge">Stack</code>에 넣는다.</li>
  <li><code class="highlighter-rouge">left</code> 노드의 가장 마지막 <code class="highlighter-rouge">leaf node</code> 가 <code class="highlighter-rouge">curr</code>이 되는 순간 <code class="highlighter-rouge">curr.left</code>는 <code class="highlighter-rouge">Null</code> 이기때문에 <code class="highlighter-rouge">while (curr !=  null) { </code> 구문에서 빠져 나오게 되고, <code class="highlighter-rouge">Stack</code>의 최상단은 마지막 <code class="highlighter-rouge">curr</code>이 들어가 있다. 결과 리스트에 <code class="highlighter-rouge">curr</code>의 값을 넣고 <code class="highlighter-rouge">curr.right</code>를 넣는데, 이때 <code class="highlighter-rouge">leaf node</code>의 <code class="highlighter-rouge">right</code>는 <code class="highlighter-rouge">Null</code> 일것이기 때문에 <code class="highlighter-rouge">while (curr !=  null) { </code>구문을 수행 하지 않고, <code class="highlighter-rouge">curr = s.pop()</code>이 수행되서 이전 <code class="highlighter-rouge">left, leaf node</code>의 <code class="highlighter-rouge">parent node</code>를 가리키게 된다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">inorderTraversal</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
        
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;();</span> 
        <span class="nc">TreeNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span> 

        <span class="k">while</span> <span class="o">(</span><span class="n">curr</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> 
            <span class="k">while</span> <span class="o">(</span><span class="n">curr</span> <span class="o">!=</span>  <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>     <span class="c1">//Left 노드 우선으로 Stack에 넣는다, 만약 기존 curr이 right이면서 leafnode 라면 s의 상단에 추가 된다.</span>
                <span class="n">s</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">curr</span><span class="o">);</span> 
                <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">left</span><span class="o">;</span> 
            <span class="o">}</span> 
  
            <span class="n">curr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
  
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">curr</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
  
            <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">right</span><span class="o">;</span> 
        <span class="o">}</span> 
        
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>        
    <span class="o">}</span>    
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET