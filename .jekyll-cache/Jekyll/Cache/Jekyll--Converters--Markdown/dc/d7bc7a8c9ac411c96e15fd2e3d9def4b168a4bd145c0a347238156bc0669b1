I"]<h1 id="problem">Problem</h1>

<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>

<p>Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.</p>

<p>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>

<h2 id="example">Example</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kt">Given</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">and</span> <span class="n">version</span> <span class="o">=</span> <span class="mi">4</span> <span class="k">is</span> <span class="n">the</span> <span class="n">first</span> <span class="n">bad</span> <span class="n">version</span><span class="o">.</span>

<span class="n">call</span> <span class="nf">isBadVersion</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">false</span>
<span class="n">call</span> <span class="nf">isBadVersion</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">true</span>
<span class="n">call</span> <span class="nf">isBadVersion</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">true</span>

<span class="kt">Then</span> <span class="mi">4</span> <span class="k">is</span> <span class="n">the</span> <span class="n">first</span> <span class="n">bad</span> <span class="n">version</span><span class="o">.</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer">My Answer</h1>

<ul>
  <li><code class="highlighter-rouge">isBadVersion</code>함수의 리턴값이 <code class="highlighter-rouge">true</code>인 최소 값을 찾자.</li>
  <li><code class="highlighter-rouge">중간값 (mid)</code>을 이용해서 <code class="highlighter-rouge">isBadVersion</code>의 결과값을 확인해서 <code class="highlighter-rouge">true</code>이면 <code class="highlighter-rouge">res</code>에 <code class="highlighter-rouge">mid</code>를 저장해 놓고, <code class="highlighter-rouge">low~mid-1</code>을 확인하자.</li>
  <li>만약 <code class="highlighter-rouge">isBadVersion</code>의 결과값이 <code class="highlighter-rouge">false</code>라면 <code class="highlighter-rouge">mid</code>값 보다 큰 영역에 찾는 값이 있다는 뜻이므로 <code class="highlighter-rouge">mid+1~ high</code>를 확인 하자.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="cm">/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="kd">extends</span> <span class="nc">VersionControl</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">firstBadVersion</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">high</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        
        <span class="k">while</span><span class="o">(</span><span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="o">((</span><span class="n">high</span><span class="o">-</span><span class="n">low</span><span class="o">)&gt;&gt;</span><span class="mi">1</span><span class="o">);</span>
            
            <span class="k">if</span> <span class="o">(</span> <span class="n">isBadVersion</span><span class="o">(</span><span class="n">mid</span><span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
                <span class="n">res</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
                <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>            
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET