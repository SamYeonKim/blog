I"yL<h1 id="problem">Problem</h1>

<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>

<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>

<h2 id="example">Example</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>    <span class="mi">1</span>
   <span class="o">/</span> <span class="p">\</span>
  <span class="mi">2</span>   <span class="mi">3</span>
     <span class="o">/</span> <span class="p">\</span>
    <span class="mi">4</span>   <span class="mi">5</span>

<span class="s">"[1,2,3,null,null,4,5]"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="clarification">Clarification</h2>

<p>The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>

<h2 id="note">Note</h2>

<p>Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</p>

<h1 id="my-answer">My Answer</h1>

<ul>
  <li><code class="highlighter-rouge">DFS</code> 방식을 이용하자.</li>
  <li><code class="highlighter-rouge">serialize</code>
    <ul>
      <li><code class="highlighter-rouge">DFS</code>를 이용해서 다음 <code class="highlighter-rouge">depth</code>의 <code class="highlighter-rouge">Node</code>를 수집 하면서 순회하자.</li>
      <li>현재 <code class="highlighter-rouge">depth</code>의 <code class="highlighter-rouge">Node</code>를 순회 하면서, <code class="highlighter-rouge">null</code>이면 <code class="highlighter-rouge">"null"</code>을 기록하고 아니라면, <code class="highlighter-rouge">value</code>를 기록 하자.</li>
      <li><code class="highlighter-rouge">Node</code>가 <code class="highlighter-rouge">null</code>이 아니라면, <code class="highlighter-rouge">curr_value_count</code>를 하나씩 감소 시키자.</li>
      <li><code class="highlighter-rouge">Node</code>의 <code class="highlighter-rouge">left or right</code>가 <code class="highlighter-rouge">null</code>이 아니라면 <code class="highlighter-rouge">child_value_count</code>를 하나씩 증가 시키자.</li>
      <li>만약 <code class="highlighter-rouge">child_value_count</code>가 0이면 다음 <code class="highlighter-rouge">depth</code>는 존재 하지 않는다.</li>
      <li>순회가 끝나면, 다음 <code class="highlighter-rouge">depth</code>처리를 위해 <code class="highlighter-rouge">curr_value_count</code>에 <code class="highlighter-rouge">child_value_count</code>의 값을 할당하고, <code class="highlighter-rouge">child_value_count</code>는 0으로 할당 하자.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">deserialize</code>
    <ul>
      <li>문자열의 포멧이 <code class="highlighter-rouge">"[x,y,z....]"</code> 이기 때문에, 맨 앞과 맨뒤의 문자를 제거하고, <code class="highlighter-rouge">","</code>를 이용해서 <code class="highlighter-rouge">split</code>해서, <code class="highlighter-rouge">splitted</code>배열에 저장하자.</li>
      <li><code class="highlighter-rouge">DFS</code>를 이용하자.</li>
      <li>현재 <code class="highlighter-rouge">Node</code>의 <code class="highlighter-rouge">left or right</code>를 구성할 때, <code class="highlighter-rouge">splitted</code>에서 가져올 것이 있다면, 가져와서 새로운 <code class="highlighter-rouge">TreeNode</code>객체를 만들어서 할당하자.</li>
      <li><code class="highlighter-rouge">splitted</code>에서 더이상 가져올 것이 없다면, 전부 구성 했다는 의미니까 종료.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Codec</span> <span class="o">{</span>

    <span class="c1">// Encodes a tree to a single string.</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">serialize</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">root</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span>
            <span class="k">return</span> <span class="s">""</span><span class="o">;</span>
        
        <span class="nc">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        
        <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"["</span><span class="o">);</span>
        <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        
        <span class="kt">int</span> <span class="n">curr_value_count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">child_value_count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        
        <span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>    
            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
            
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">TreeNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%s"</span><span class="o">,</span> <span class="n">node</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="s">"null"</span> <span class="o">:</span> <span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">));</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span> <span class="n">node</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span>
                        <span class="n">curr_value_count</span><span class="o">--;</span>
                    
                    <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">",%s"</span><span class="o">,</span> <span class="n">node</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="s">"null"</span> <span class="o">:</span> <span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">));</span>    
                <span class="o">}</span>

                <span class="k">if</span> <span class="o">(</span> <span class="n">node</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span> 
                    <span class="k">continue</span><span class="o">;</span> 
                
                <span class="k">if</span> <span class="o">(</span> <span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>                                    
                    <span class="n">child_value_count</span><span class="o">++;</span>
                <span class="o">}</span>

                <span class="k">if</span> <span class="o">(</span> <span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
                    <span class="n">child_value_count</span><span class="o">++;</span>
                <span class="o">}</span>   

                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
                
                <span class="k">if</span> <span class="o">(</span> <span class="n">curr_value_count</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">)</span>
                    <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>            
            
            <span class="k">if</span> <span class="o">(</span> <span class="n">child_value_count</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">)</span>
                <span class="k">break</span><span class="o">;</span>
            
            <span class="n">curr_value_count</span> <span class="o">=</span> <span class="n">child_value_count</span><span class="o">;</span>
            <span class="n">child_value_count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"]"</span><span class="o">);</span>
        
        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>        
    <span class="o">}</span>

    <span class="c1">// Decodes your encoded data to tree.</span>
    <span class="kd">public</span> <span class="nc">TreeNode</span> <span class="nf">deserialize</span><span class="o">(</span><span class="nc">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">data</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">data</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        
        <span class="nc">String</span> <span class="n">values</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">data</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">splitted</span> <span class="o">=</span> <span class="n">values</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">TreeNode</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">splitted</span><span class="o">[</span><span class="n">i</span><span class="o">++]));</span>
        
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        
        <span class="k">while</span> <span class="o">(</span> <span class="o">!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">splitted</span><span class="o">.</span><span class="na">length</span> <span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
            <span class="nl">outerloop:</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">x</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">TreeNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">y</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">;</span><span class="n">y</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">splitted</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>
                        <span class="k">break</span> <span class="n">outerloop</span><span class="o">;</span>
                    
                    <span class="nc">String</span> <span class="n">val</span> <span class="o">=</span> <span class="n">splitted</span><span class="o">[</span><span class="n">i</span><span class="o">++];</span>
                    <span class="k">try</span> <span class="o">{</span>
                        <span class="k">if</span> <span class="o">(</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
                            <span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">val</span><span class="o">));</span>                     
                            <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>    
                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                            <span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">val</span><span class="o">));</span>                     
                            <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>    
                        <span class="o">}</span>                        
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">NumberFormatException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>                        
                    <span class="o">}</span>                                        
                <span class="o">}</span>                           
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Your Codec object will be instantiated and called as such:</span>
<span class="c1">// Codec codec = new Codec();</span>
<span class="c1">// codec.deserialize(codec.serialize(root));</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET