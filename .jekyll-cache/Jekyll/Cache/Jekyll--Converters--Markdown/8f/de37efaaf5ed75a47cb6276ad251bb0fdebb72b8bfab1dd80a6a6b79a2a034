I"S(<h1 id="problem">Problem</h1>

<p>Given a non-empty array of numbers, <script type="math/tex">% <![CDATA[
a_0,a_1,a_2,...,a_{n-1}, where\ 0\le a_i < 2^{31} %]]></script></p>

<p>Find the maximum result of <script type="math/tex">a_i</script> XOR <script type="math/tex">a_j</script>, where 0 ≤ i, j &lt; n.</p>

<p>Could you do this in O(n) runtime?</p>

<h2 id="example">Example</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
<span class="kt">Output</span><span class="p">:</span> <span class="mi">28</span>
<span class="kt">Explanation</span><span class="p">:</span> <span class="kt">The</span> <span class="n">maximum</span> <span class="n">result</span> <span class="k">is</span> <span class="mi">5</span> <span class="o">^</span> <span class="mi">25</span> <span class="o">=</span> <span class="mi">28</span><span class="o">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer">My Answer</h1>

<ul>
  <li><code class="highlighter-rouge">nums</code>의 숫자들을 <code class="highlighter-rouge">bit</code>표현으로 <code class="highlighter-rouge">Trie</code>를 구성해 놓는다. <code class="highlighter-rouge">int</code>는 32bit 이기 때문에, 32개로 구성.</li>
  <li><code class="highlighter-rouge">nums</code>의 숫자들을 순회 하면서, 구성해 놓은 <code class="highlighter-rouge">Trie</code>와 반대되는 비트에 해당하는 자식을 다음 <code class="highlighter-rouge">Trie</code>노드로 사용한다.
    <blockquote>
      <p>왜냐하면, <code class="highlighter-rouge">XOR</code>연산은 <code class="highlighter-rouge">bit</code>가 서로 다를때 <code class="highlighter-rouge">1</code>이고, 같을때 <code class="highlighter-rouge">0</code>이기 때문.</p>
    </blockquote>
  </li>
  <li>만약 다른 <code class="highlighter-rouge">bit</code>에 해당 하는 자식이 있다면, <code class="highlighter-rouge">max_xor</code>에 현재 비트 위치에 1을 할당한 값을 더한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Trie</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Trie</span> <span class="n">one</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">Trie</span> <span class="n">zero</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Trie</span> <span class="n">cur</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">31</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">bit</span> <span class="o">=</span> <span class="o">(</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span> <span class="n">bit</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">cur</span><span class="o">.</span><span class="na">zero</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
                <span class="n">cur</span><span class="o">.</span><span class="na">zero</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Trie</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span> <span class="n">bit</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">cur</span><span class="o">.</span><span class="na">one</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
                <span class="n">cur</span><span class="o">.</span><span class="na">one</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Trie</span><span class="o">();</span>  
            <span class="o">}</span>    
            
            <span class="n">cur</span> <span class="o">=</span> <span class="n">bit</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">cur</span><span class="o">.</span><span class="na">one</span> <span class="o">:</span> <span class="n">cur</span><span class="o">.</span><span class="na">zero</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">findMaximumXOR</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Trie</span> <span class="n">trie</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Trie</span><span class="o">();</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">trie</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
        <span class="o">}</span>
        
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Trie</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">trie</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">max_xor</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">31</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">bit</span> <span class="o">=</span> <span class="o">(</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="o">;</span>
                <span class="nc">Trie</span> <span class="n">next</span> <span class="o">=</span> <span class="n">bit</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">cur</span><span class="o">.</span><span class="na">zero</span> <span class="o">:</span> <span class="n">cur</span><span class="o">.</span><span class="na">one</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span> <span class="n">next</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
                    <span class="n">max_xor</span> <span class="o">+=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="o">;</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">bit</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">cur</span><span class="o">.</span><span class="na">one</span> <span class="o">:</span> <span class="n">cur</span><span class="o">.</span><span class="na">zero</span><span class="o">;</span>
                <span class="o">}</span>                
            <span class="o">}</span>
            <span class="n">max</span> <span class="o">=</span> <span class="n">max</span> <span class="o">&gt;</span> <span class="n">max_xor</span> <span class="o">?</span> <span class="n">max</span> <span class="o">:</span> <span class="n">max_xor</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">max</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET