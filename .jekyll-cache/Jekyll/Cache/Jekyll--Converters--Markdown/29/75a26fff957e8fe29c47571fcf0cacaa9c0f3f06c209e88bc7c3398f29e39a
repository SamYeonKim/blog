I"…<h1 id="problem">Problem</h1>

<p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>

<h2 id="note">Note</h2>

<p>A leaf is a node with no children.</p>

<h2 id="example">Example</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> 
<span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="mi">22</span>

      <span class="mi">5</span>
     <span class="o">/</span> <span class="p">\</span>
    <span class="mi">4</span>   <span class="mi">8</span>
   <span class="o">/</span>   <span class="o">/</span> <span class="p">\</span>
  <span class="mi">11</span>  <span class="mi">13</span>  <span class="mi">4</span>
 <span class="o">/</span>  <span class="p">\</span>      <span class="p">\</span>
<span class="mi">7</span>    <span class="mi">2</span>      <span class="mi">1</span>

<span class="kt">Output</span><span class="p">:</span> <span class="kc">true</span>
<span class="kt">Explanation</span><span class="p">:</span> <span class="k">as</span> <span class="n">there</span> <span class="n">exist</span> <span class="n">a</span> <span class="n">root</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">leaf</span> <span class="n">path</span> <span class="mi">5</span><span class="o">-&gt;</span><span class="mi">4</span><span class="o">-&gt;</span><span class="mi">11</span><span class="o">-&gt;</span><span class="mi">2</span> <span class="n">which</span> <span class="n">sum</span> <span class="k">is</span> <span class="mi">22</span><span class="o">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer">My Answer</h1>

<ul>
  <li>Ïû¨Í∑ÄÎ•º Ïù¥Ïö©Ìï¥ÏÑú Ìï¥Í≤∞</li>
  <li><code class="highlighter-rouge">leaf</code> Ïù¥Î©¥ÏÑú ÏµúÏ¢Ö <code class="highlighter-rouge">sum</code>Ïù¥ 0ÏùºÎïåÎßå <code class="highlighter-rouge">true</code>Ïù¥Îã§.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasPathSum</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">root</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        
        <span class="n">sum</span> <span class="o">-=</span> <span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
        
        <span class="k">if</span> <span class="o">(</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">sum</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">)</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        
        <span class="k">if</span> <span class="o">(</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span> <span class="n">hasPathSum</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">sum</span><span class="o">)</span> <span class="o">)</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">if</span> <span class="o">(</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span> <span class="n">hasPathSum</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">sum</span><span class="o">))</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET