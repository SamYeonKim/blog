I"L<h1 id="problem">Problem</h1>

<p>Given a sorted array, two integers k and x, find the k closest elements to x in the array. The result should also be sorted in ascending order. If there is a tie, the smaller elements are always preferred.</p>

<h2 id="example-1">Example 1</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span> <span class="n">k</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="mi">3</span>
<span class="kt">Output</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="example-2">Example 2</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span> <span class="n">k</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">x</span><span class="o">=-</span><span class="mi">1</span>
<span class="kt">Output</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="note">Note</h2>

<ol>
  <li>The value k is positive and will always be smaller than the length of the sorted array.</li>
  <li>Length of the given array is positive and will not exceed 10^4</li>
  <li>Absolute value of elements in the array and x will not exceed 10^4</li>
</ol>

<h1 id="my-answer">My Answer</h1>

<ul>
  <li><code class="highlighter-rouge">x</code>와 가장 가까운 연속된 원소 <code class="highlighter-rouge">k</code>개를 찾는 문제.</li>
  <li>만약 첫번째 원소가 <code class="highlighter-rouge">x</code>와 같거나 크면 <code class="highlighter-rouge">arr[0~k]</code>가 정답</li>
  <li>만약 마지막 원소가 <code class="highlighter-rouge">x</code>와 같거나 작으면 <code class="highlighter-rouge">arr[length-k~count]</code>가 정답</li>
  <li>위 조건들을 만족 하지 않을 경우엔 다음과 같다.
    <ul>
      <li><code class="highlighter-rouge">x</code>와 같거나 가장 가까운 값의 <code class="highlighter-rouge">index</code>를 찾는다.</li>
      <li><code class="highlighter-rouge">start</code>는 <code class="highlighter-rouge">0</code> 혹은 <code class="highlighter-rouge">index-k</code> 중에 큰 값으로 한다.</li>
      <li><code class="highlighter-rouge">end</code>는 <code class="highlighter-rouge">arr.length - 1</code> 혹은 <code class="highlighter-rouge">index+k</code>중에 작은 값으로 한다.</li>
      <li><code class="highlighter-rouge">start ~ end</code>의 갯수가 <code class="highlighter-rouge">k</code>가 될때 까지 반복한다.</li>
      <li>만약 <code class="highlighter-rouge">arr[end]-x</code>가 <code class="highlighter-rouge">x-arr[start]</code>보다 크면, 앞쪽이 더 <code class="highlighter-rouge">x</code>에 가깝다는 것이니 <code class="highlighter-rouge">end</code>를 하나 줄인다.</li>
      <li>만약 <code class="highlighter-rouge">arr[end]-x</code>가 <code class="highlighter-rouge">x-arr[start]</code>보다 작으면, 뒷쪽이 더 <code class="highlighter-rouge">x</code>에 가깝다는 것이니 <code class="highlighter-rouge">start</code>를 하나 늘린다.</li>
      <li>만약 <code class="highlighter-rouge">arr[end]-x</code>와 <code class="highlighter-rouge">x-arr[start]</code>가 같다면, 임의로 <code class="highlighter-rouge">end</code>를 하나 줄인다.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">findClosestElements</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>        
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">count</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
        
        <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">count</span><span class="o">;</span>
        
        <span class="k">if</span> <span class="o">(</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">x</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span> <span class="n">arr</span><span class="o">[</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="n">count</span> <span class="o">-</span> <span class="n">k</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">searchIndex</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">x</span><span class="o">);</span>            
            <span class="n">start</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">index</span><span class="o">-</span><span class="n">k</span><span class="o">);</span>
            <span class="n">end</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">index</span><span class="o">+</span><span class="n">k</span><span class="o">);</span>
            
            <span class="k">while</span><span class="o">(</span> <span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">k</span> <span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span> <span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">]-</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">x</span> <span class="o">-</span> <span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">])</span> <span class="o">{</span>
                    <span class="n">end</span><span class="o">--;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span> <span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">]-</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">x</span> <span class="o">-</span> <span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">])</span> <span class="o">{</span>
                    <span class="n">start</span><span class="o">++;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">end</span><span class="o">--;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            
            <span class="n">result</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kt">int</span> <span class="nf">searchIndex</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">l</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">h</span><span class="o">=</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        
        <span class="k">while</span><span class="o">(</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">h</span> <span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">l</span><span class="o">+</span><span class="n">h</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
            
            <span class="k">if</span> <span class="o">(</span> <span class="n">arr</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">==</span> <span class="n">target</span> <span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">mid</span><span class="o">;</span>
            <span class="o">}</span>
            
            <span class="k">if</span> <span class="o">(</span> <span class="n">arr</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">target</span> <span class="o">)</span> <span class="o">{</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">h</span><span class="o">=</span><span class="n">mid</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">l</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="fastest-answer">Fastest Answer</h1>

<ul>
  <li>재귀를 이용</li>
  <li>만약 <code class="highlighter-rouge">x-arr[mid]</code>가 <code class="highlighter-rouge">arr[mid+k]-x</code>보다 크면, 우측이 더 <code class="highlighter-rouge">x</code>에 가깝다는것이니 우측영역에서 다시 찾는다.</li>
  <li>만약 <code class="highlighter-rouge">x-arr[mid]</code>가 <code class="highlighter-rouge">arr[mid+k]-x</code>보다 작거나 같으면, 좌측이 더 <code class="highlighter-rouge">x</code>에 가깝다는것이니 좌측영역에서 다시 찾는다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">findClosestElements</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">find</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">k</span><span class="o">,</span> <span class="n">k</span><span class="o">,</span> <span class="n">x</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">find</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">left</span> <span class="o">==</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">left</span> <span class="o">+</span> <span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">arr</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="o">[</span><span class="n">mid</span> <span class="o">+</span> <span class="n">k</span><span class="o">]</span> <span class="o">-</span> <span class="n">x</span><span class="o">)</span>
            <span class="k">return</span> <span class="nf">find</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">k</span><span class="o">,</span> <span class="n">x</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="nf">find</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">mid</span><span class="o">,</span> <span class="n">k</span><span class="o">,</span> <span class="n">x</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET