I"c"<h1 id="problem">Problem</h1>

<p>Given a binary tree, determine if it is height-balanced.</p>

<p>For this problem, a height-balanced binary tree is defined as: <code class="highlighter-rouge">a binary tree in which the left and right subtrees of every node differ in height by no more than 1.</code></p>

<h2 id="example-1">Example 1</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
    <span class="mi">3</span>
   <span class="o">/</span> <span class="p">\</span>
  <span class="mi">9</span>  <span class="mi">20</span>
    <span class="o">/</span>  <span class="p">\</span>
   <span class="mi">15</span>   <span class="mi">7</span>
<span class="kt">Output</span><span class="p">:</span> <span class="kc">true</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="example-2">Example 2</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
       <span class="mi">1</span>
      <span class="o">/</span> <span class="p">\</span>
     <span class="mi">2</span>   <span class="mi">2</span>
    <span class="o">/</span> <span class="p">\</span>
   <span class="mi">3</span>   <span class="mi">3</span>
  <span class="o">/</span> <span class="p">\</span>
 <span class="mi">4</span>   <span class="mi">4</span>
<span class="kt">Output</span><span class="p">:</span> <span class="kc">false</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="my-answer">My Answer</h1>

<ul>
  <li>특정 <code class="highlighter-rouge">TreeNode</code> 기준으로 최대 깊이 값을 구하는 <code class="highlighter-rouge">getMaxHeight</code> 함수를 이용하자.</li>
  <li><code class="highlighter-rouge">isBalanced</code>에서 <code class="highlighter-rouge">left, right</code> 기준으로 최대 깊이를 구하고, 깊이의 차가 1보다 같거나 작으면 <code class="highlighter-rouge">left, right</code>에 대해서 계속 확인 하자. <code class="highlighter-rouge">left</code>나 <code class="highlighter-rouge">right</code> 둘 중에 하나라도 만족하지 않는다면 <code class="highlighter-rouge">false</code></li>
  <li>더 최적화할 여지가 있을것 같다.
    <ul>
      <li><code class="highlighter-rouge">getMaxHeight</code>함수에 의해서 각 노드에 대해서 최대 높이 값을 구해놓은 상태 이기 때문에, <code class="highlighter-rouge">isBalanced</code>를 재귀 호출 할 때 다른식으로 할 수 있지 않을까?</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isBalanced</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">root</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>

        <span class="kt">int</span> <span class="n">height_l</span> <span class="o">=</span> <span class="n">getMaxHeight</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">height_r</span> <span class="o">=</span> <span class="n">getMaxHeight</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        
        <span class="k">if</span> <span class="o">(</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">height_r</span> <span class="o">-</span> <span class="n">height_l</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="o">)</span> <span class="o">{</span> <span class="c1">//현재 노드 기준으로는 만족 했다. left, right 노드에 대해서 확인 하자.</span>
            <span class="k">return</span> <span class="nf">isBalanced</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isBalanced</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>    
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kt">int</span> <span class="nf">getMaxHeight</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">root</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span>
            <span class="k">return</span> <span class="n">height</span><span class="o">;</span>
        
        <span class="n">height</span><span class="o">++;</span>
            
        <span class="k">if</span> <span class="o">(</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span>
            <span class="k">return</span> <span class="n">height</span><span class="o">;</span>
        
        <span class="kt">int</span> <span class="n">height_l</span> <span class="o">=</span> <span class="n">getMaxHeight</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">height_r</span> <span class="o">=</span> <span class="n">getMaxHeight</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
        
        <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">height_l</span><span class="o">,</span> <span class="n">height_r</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET