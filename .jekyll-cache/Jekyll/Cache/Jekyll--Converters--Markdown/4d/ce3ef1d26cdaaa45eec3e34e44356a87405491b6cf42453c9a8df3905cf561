I" &<h1 id="problem">Problem</h1>

<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p>

<p>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”</p>

<p>Given binary search tree:  root = [6,2,8,0,4,7,9,null,null,3,5]</p>

<p><img src="/assets/img/leetcode/lca_bst_tree.png" alt="" /></p>

<h2 id="example-1">Example 1</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="n">root</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="mi">8</span>
<span class="kt">Output</span><span class="p">:</span> <span class="mi">6</span>
<span class="kt">Explanation</span><span class="p">:</span> <span class="kt">The</span> <span class="kt">LCA</span> <span class="n">of</span> <span class="n">nodes</span> <span class="mi">2</span> <span class="n">and</span> <span class="mi">8</span> <span class="k">is</span> <span class="mi">6</span><span class="o">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="example-2">Example 2</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kt">Input</span><span class="p">:</span> <span class="n">root</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="n">null</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="mi">4</span>
<span class="kt">Output</span><span class="p">:</span> <span class="mi">2</span>
<span class="kt">Explanation</span><span class="p">:</span> <span class="kt">The</span> <span class="kt">LCA</span> <span class="n">of</span> <span class="n">nodes</span> <span class="mi">2</span> <span class="n">and</span> <span class="mi">4</span> <span class="k">is</span> <span class="mi">2</span><span class="p">,</span> <span class="n">since</span> <span class="n">a</span> <span class="n">node</span> <span class="n">can</span> <span class="n">be</span> <span class="n">a</span> <span class="n">descendant</span> <span class="n">of</span> <span class="n">itself</span> <span class="n">according</span> <span class="n">to</span> <span class="n">the</span> <span class="kt">LCA</span> <span class="n">definition</span><span class="o">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="note">Note</h2>

<ul>
  <li>All of the nodes’ values will be unique</li>
  <li>p and q are different and both values will exist in the BST.</li>
</ul>

<h1 id="my-answer">My Answer</h1>

<ul>
  <li><code class="highlighter-rouge">BST</code>의 특징을 이용하자.
    <ul>
      <li>
        <script type="math/tex; mode=display">root.left \le root \le root.right</script>
      </li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">p</code>와 <code class="highlighter-rouge">q</code>중에 큰 값(<code class="highlighter-rouge">b</code>)와 작은 값(<code class="highlighter-rouge">s</code>)가 무엇인지 다음의 조건을 이용해서 확인.
    <ol>
      <li>만약 <script type="math/tex">s \le root \le b</script> 라면 <code class="highlighter-rouge">root</code>가 <code class="highlighter-rouge">LCA</code>이다.</li>
      <li>만약 <script type="math/tex">s \le b \le root</script> 라면 <code class="highlighter-rouge">root.left</code> 를 기준으로 다시 <code class="highlighter-rouge">1번 조건</code>을 만족하는지 확인해야 한다.</li>
      <li>만약 <script type="math/tex">root \le s \le b</script> 라면 <code class="highlighter-rouge">root.right</code> 를 기준으로 다시 <code class="highlighter-rouge">1번 조건</code>을 만족하는지 확인해야 한다.</li>
    </ol>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">TreeNode</span> <span class="nf">lowestCommonAncestor</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="nc">TreeNode</span> <span class="n">p</span><span class="o">,</span> <span class="nc">TreeNode</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        
        <span class="k">if</span> <span class="o">(</span> <span class="n">p</span><span class="o">.</span><span class="na">val</span> <span class="o">&gt;</span> <span class="n">q</span><span class="o">.</span><span class="na">val</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">min</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
            <span class="n">max</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">min</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
            <span class="n">max</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">if</span> <span class="o">(</span> <span class="n">min</span> <span class="o">&lt;=</span> <span class="n">root</span><span class="o">.</span><span class="na">val</span> <span class="o">&amp;&amp;</span> <span class="n">max</span> <span class="o">&gt;=</span> <span class="n">root</span><span class="o">.</span><span class="na">val</span> <span class="o">)</span>   <span class="c1">//1번 조건</span>
            <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
        
        <span class="k">if</span> <span class="o">(</span> <span class="n">min</span> <span class="o">&lt;</span> <span class="n">root</span><span class="o">.</span><span class="na">val</span> <span class="o">&amp;&amp;</span> <span class="n">max</span> <span class="o">&lt;</span> <span class="n">root</span><span class="o">.</span><span class="na">val</span> <span class="o">)</span> <span class="o">{</span>   <span class="c1">//2번 조건</span>
            <span class="k">return</span> <span class="nf">lowestCommonAncestor</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">p</span><span class="o">,</span> <span class="n">q</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>                                    <span class="c1">//3번 조건</span>
            <span class="k">return</span> <span class="nf">lowestCommonAncestor</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">p</span><span class="o">,</span> <span class="n">q</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET