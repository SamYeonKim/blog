I";<h1 id="problem">Problem</h1>

<p>Given a binary tree, return all duplicate subtrees. For each kind of duplicate subtrees, you only need to return the root node of any one of them.</p>

<p>Two trees are duplicate if they have the same structure with same node values.</p>

<h2 id="example">Example</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>        <span class="mi">1</span>
       <span class="o">/</span> <span class="p">\</span>
      <span class="mi">2</span>   <span class="mi">3</span>
     <span class="o">/</span>   <span class="o">/</span> <span class="p">\</span>
    <span class="mi">4</span>   <span class="mi">2</span>   <span class="mi">4</span>
       <span class="o">/</span>
      <span class="mi">4</span>

<span class="kt">The</span> <span class="n">following</span> <span class="n">are</span> <span class="n">two</span> <span class="n">duplicate</span> <span class="n">subtrees</span><span class="o">.</span>

      <span class="mi">2</span>
     <span class="o">/</span>
    <span class="mi">4</span>
<span class="n">and</span>
    <span class="mi">4</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="solution">Solution</h1>

<ul>
  <li><code class="highlighter-rouge">HashMap</code>을 이용하자. 각 <code class="highlighter-rouge">TreeNode</code>별로 고유값을 반환할 <code class="highlighter-rouge">lookup</code>함수를 이용.</li>
  <li><code class="highlighter-rouge">lookup</code>함수에선, 각 <code class="highlighter-rouge">TreeNode</code>별 고유문자열을 만들고 이것을 키로 하고, 고유문자열에 대응되는 번호를 매겨서 값으로 사용하는 <code class="highlighter-rouge">HashMap trees</code>를 사용</li>
  <li><code class="highlighter-rouge">trees</code>의 값 별로 발생 횟수를 저장할 <code class="highlighter-rouge">HashMap count</code>를 사용</li>
  <li>만약 <code class="highlighter-rouge">count</code>의 값이 <code class="highlighter-rouge">2</code>라면, 중복 발생했다는 의미 이기 때문에, 결과 리스트에 추가</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">t</span><span class="o">;</span>                          <span class="c1">//고유 번호를 생성하기 위한 변수</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">trees</span><span class="o">;</span>     <span class="c1">//각 TreeNode의 고유 문자열, 고유 번호</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">count</span><span class="o">;</span>    <span class="c1">//각 TreeNode의 고유 번호, 발생 횟수</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">ans</span><span class="o">;</span>             <span class="c1">//결과 리스트</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="nf">findDuplicateSubtrees</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">t</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">trees</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">();</span>
        <span class="n">count</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">();</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
        <span class="n">lookup</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">lookup</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="cm">/*
        1. 고유 문자열 생성, 현재 TreeNode::val + "," + TreeNode::left의 고유번호 + "," + TreeNode::right의 고유번호
        2. 고유 문자열을 이용한 고유번호 생성 및 trees에 기록
        3. 고유번호의 발생 횟수 기록
        4. 고유번호의 발생 횟수가 2이면 정답
        */</span>
        <span class="nc">String</span> <span class="n">serial</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">val</span> <span class="o">+</span> <span class="s">","</span> <span class="o">+</span> <span class="n">lookup</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">+</span> <span class="s">","</span> <span class="o">+</span> <span class="n">lookup</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>        
        <span class="kt">int</span> <span class="n">uid</span> <span class="o">=</span> <span class="n">trees</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">serial</span><span class="o">,</span> <span class="n">x</span><span class="o">-&gt;</span> <span class="n">t</span><span class="o">++);</span>
        <span class="n">count</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">uid</span><span class="o">,</span> <span class="n">count</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">uid</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">count</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">uid</span><span class="o">)</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span>
            <span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">uid</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET